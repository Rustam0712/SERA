google.charts.load('current', { packages: ['corechart'] });

function updateSummaries() {
    if (!lastFilledDate) {
        document.getElementById('day-plan').innerText = '0';
        document.getElementById('day-actual').innerText = '0';
        document.getElementById('day-mid').innerText = '0'; // Mid –¥–ª—è –¥–Ω—è
        document.getElementById('month-plan').innerText = '0';
        document.getElementById('month-actual').innerText = '0';
        document.getElementById('month-mid').innerText = '0'; // Mid –¥–ª—è –º–µ—Å—è—Ü–∞
        document.getElementById('year-plan').innerText = '0';
        document.getElementById('year-actual').innerText = '0';
        document.getElementById('year-mid').innerText = '0'; // Mid –¥–ª—è –≥–æ–¥–∞
        return;
    }

    let dayPlan = 0, dayActual = 0, dayMid = 0; // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è mid
    let monthPlan = 0, monthActual = 0, monthMid = 0; // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è mid
    let yearPlan = 0, yearActual = 0, yearMid = 0; // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è mid

    const lastDay = lastFilledDate.getDate();
    const lastMonth = lastFilledDate.getMonth();
    const lastYear = lastFilledDate.getFullYear();

    for (let i = 1; i < json.length; i++) {
        const row = json[i];
        if (!row || !row[0]) continue;

        const excelDate = row[0];
        const dateCell = new Date((excelDate - (25567 + 2)) * 86400 * 1000);
        if (isNaN(dateCell)) continue;

        const plan = parseFloat(row[6]) || 0;   // G –∫–æ–ª–æ–Ω–∫–∞
        const actual = parseFloat(row[7]) || 0; // H –∫–æ–ª–æ–Ω–∫–∞
        const mid = parseFloat(row[8]) || 0;   // I –∫–æ–ª–æ–Ω–∫–∞ (mid)

        if (dateCell.getFullYear() === lastYear) {
            yearPlan += plan;
            yearActual += actual;
            yearMid += mid; // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –≥–æ–¥–∞

            if (dateCell.getMonth() === lastMonth) {
                monthPlan += plan;
                monthActual += actual;
                monthMid += mid; // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –º–µ—Å—è—Ü–∞

                if (dateCell.getDate() === lastDay) {
                    dayPlan += plan;
                    dayActual += actual;
                    dayMid += mid; // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –¥–Ω—è
                }
            }
        }
    }

    console.log(`–°—É–º–º–∞ –∑–∞ –¥–µ–Ω—å: –ü–ª–∞–Ω=${dayPlan}, –§–∞–∫—Ç=${dayActual}, Mid=${dayMid}`);
    console.log(`–°—É–º–º–∞ –∑–∞ –º–µ—Å—è—Ü: –ü–ª–∞–Ω=${monthPlan}, –§–∞–∫—Ç=${monthActual}, Mid=${monthMid}`);
    console.log(`–°—É–º–º–∞ –∑–∞ –≥–æ–¥: –ü–ª–∞–Ω=${yearPlan}, –§–∞–∫—Ç=${yearActual}, Mid=${yearMid}`);

    document.getElementById('day-plan').innerText = dayPlan.toFixed(2);
    document.getElementById('day-actual').innerText = dayActual.toFixed(2);
    document.getElementById('day-mid').innerText = dayMid.toFixed(2); // –û–±–Ω–æ–≤–ª—è–µ–º mid –¥–ª—è –¥–Ω—è

    document.getElementById('month-plan').innerText = monthPlan.toFixed(2);
    document.getElementById('month-actual').innerText = monthActual.toFixed(2);
    document.getElementById('month-mid').innerText = monthMid.toFixed(2); // –û–±–Ω–æ–≤–ª—è–µ–º mid –¥–ª—è –º–µ—Å—è—Ü–∞

    document.getElementById('year-plan').innerText = yearPlan.toFixed(2);
    document.getElementById('year-actual').innerText = yearActual.toFixed(2);
    document.getElementById('year-mid').innerText = yearMid.toFixed(2); // –û–±–Ω–æ–≤–ª—è–µ–º mid –¥–ª—è –≥–æ–¥–∞
}



let json = [];
let lastFilledDate = null;

document.getElementById('file-input').addEventListener('change', (event) => {
    const input = event.target;
    if (!input.files.length) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel.');
        return;
    }

    const reader = new FileReader();
    reader.onload = function (e) {
        const data = new Uint8Array(e.target.result);
        const workbook = XLSX.read(data, { type: 'array' });

        const sheet = workbook.Sheets['–°–µ—Ä–∞'];
        if (!sheet) {
            alert("–õ–∏—Å—Ç '–°–µ—Ä–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel-—Ñ–∞–π–ª–µ.");
            return;
        }

        // üëá –í–µ—Å—å —Ç–≤–æ–π –∫–æ–¥ –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏
        json = XLSX.utils.sheet_to_json(sheet, { header: 1 });
        lastFilledDate = null;

        drawChart(filterData("–û–±—â–∏–π", null, null));
        updateSummaries();

        //-------------------------------------->
        // üëâ –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        if (lastFilledDate) {
            let sColumnSum = 0;
            for (let i = 1; i < json.length; i++) {
                const row = json[i];
                if (!row || !row[0]) continue;

                const excelDate = row[0];
                const dateCell = new Date((excelDate - (25567 + 2)) * 86400 * 1000);
                if (isNaN(dateCell)) continue;

                if (
                    dateCell.getDate() === lastFilledDate.getDate() &&
                    dateCell.getMonth() === lastFilledDate.getMonth() &&
                    dateCell.getFullYear() === lastFilledDate.getFullYear()
                ) {
                    const val = parseFloat(row[18]);
                    if (!isNaN(val)) {
                        sColumnSum += val;
                    }
                }
            }

            document.getElementById('s-column-sum').innerText = `${sColumnSum.toFixed(2)}`;
            console.log(sColumnSum.toFixed(2));
        }



        if (lastFilledDate) {
            let sColumnSum = 0;
            for (let i = 1; i < json.length; i++) {
                const row = json[i];
                if (!row || !row[0]) continue;

                const excelDate = row[0];
                const dateCell = new Date((excelDate - (25567 + 2)) * 86400 * 1000);
                if (isNaN(dateCell)) continue;

                if (
                    dateCell.getDate() === lastFilledDate.getDate() &&
                    dateCell.getMonth() === lastFilledDate.getMonth() &&
                    dateCell.getFullYear() === lastFilledDate.getFullYear()
                ) {
                    const val = parseFloat(row[19]);
                    if (!isNaN(val)) {
                        sColumnSum += val;
                    }
                }
            }

            document.getElementById('s-column-sum1').innerText = `${sColumnSum.toFixed(2)}`;
            console.log(sColumnSum.toFixed(2));
        }




        if (lastFilledDate) {
            let sColumnSum = 0;
            for (let i = 1; i < json.length; i++) {
                const row = json[i];
                if (!row || !row[0]) continue;

                const excelDate = row[0];
                const dateCell = new Date((excelDate - (25567 + 2)) * 86400 * 1000);
                if (isNaN(dateCell)) continue;

                if (
                    dateCell.getDate() === lastFilledDate.getDate() &&
                    dateCell.getMonth() === lastFilledDate.getMonth() &&
                    dateCell.getFullYear() === lastFilledDate.getFullYear()
                ) {
                    const val = parseFloat(row[20]);
                    if (!isNaN(val)) {
                        sColumnSum += val;
                    }
                }
            }

            document.getElementById('s-column-sum2').innerText = `${sColumnSum.toFixed(2)}`;
            console.log(sColumnSum.toFixed(2));
        }


        if (lastFilledDate) {
            let ishlabChiqarishSum = 0;
            let birjagaYuklashSum = 0;
            let eksportSum = 0;

            for (let i = 1; i < json.length; i++) {
                const row = json[i];
                if (!row || !row[0]) continue;

                const excelDate = row[0];
                const dateCell = new Date((excelDate - (25567 + 2)) * 86400 * 1000);
                if (isNaN(dateCell)) continue;

                // –¢–æ–ª—å–∫–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –¥–µ–Ω—å
                if (
                    dateCell.getDate() === lastFilledDate.getDate() &&
                    dateCell.getMonth() === lastFilledDate.getMonth() &&
                    dateCell.getFullYear() === lastFilledDate.getFullYear()
                ) {
                    const category = row[3];
                    const value = parseFloat(row[7]); // –∫–æ–ª–æ–Ω–∫–∞ H

                    if (category === "–ò—à–ª–∞–± —á–∏“õ–∞—Ä–∏—à" && !isNaN(value)) {
                        ishlabChiqarishSum += value;
                    }

                    if (category === "–ë–∏—Ä–∂–∞–≥–∞ —é–∫–ª–∞—à" && !isNaN(value)) {
                        birjagaYuklashSum += value;
                    }
                    if (category === "–≠–∫—Å–ø–æ—Ä—Ç" && !isNaN(value)) {
                        eksportSum += value;
                    }
                }
            }

            document.getElementById('sum-text').innerText = `${ishlabChiqarishSum.toFixed(2)}`;
            document.getElementById('sum-text1').innerText = `${birjagaYuklashSum.toFixed(2)}`;
            document.getElementById('sum-text2').innerText = `${eksportSum.toFixed(2)}`;
            console.log("–ò—à–ª–∞–± —á–∏“õ–∞—Ä–∏—à —Å—É–º–º–∞:", ishlabChiqarishSum);
            console.log("–ë–∏—Ä–∂–∞–≥–∞ —é–∫–ª–∞—à —Å—É–º–º–∞:", birjagaYuklashSum);
            console.log("–≠–∫—Å–ø–æ—Ä—Ç:", eksportSum);
        }


        let uzbekneftgazSum = 0;
        let otherSum = 0;

        for (let i = 1; i < json.length; i++) {
            const row = json[i];
            if (!row || !row[2] || !row[3]) continue;

            const company = row[2]; // –∫–æ–ª–æ–Ω–∫–∞ C
            const category = row[3]; // –∫–æ–ª–æ–Ω–∫–∞ D
            const value = parseFloat(row[7]); // –∫–æ–ª–æ–Ω–∫–∞ H

            if (category === "–ò—à–ª–∞–± —á–∏“õ–∞—Ä–∏—à" && !isNaN(value)) {
                if (company === "–é–∑–±–µ–∫–Ω–µ—Ñ—Ç–≥–∞–∑") {
                    uzbekneftgazSum += value;
                } else {
                    otherSum += value;
                }
            }
        }

        document.getElementById('uzbekneftgazsum').innerText = `${uzbekneftgazSum.toFixed(0)}`;
        document.getElementById('other-sum').innerText = `${otherSum.toFixed(0)}`;
        console.log("–é–∑–±–µ–∫–Ω–µ—Ñ—Ç–≥–∞–∑ —Å—É–º–º–∞:", uzbekneftgazSum);
        console.log("–ë–æ—à“õ–∞ –∫–æ–º–ø–∞–Ω–∏—è–ª–∞—Ä —Å—É–º–º–∞:", otherSum);



        //--------------------------< –¢–ê–ë–õ–ò–¶–ê FACTORY-TABLE >------------------------------------------//


        let lastDate = "";
        for (let i = 1; i < json.length; i++) {
            const row = json[i];
            const date = row[0];
            if (date) lastDate = date;
        }

        let companiesSet = new Set();
        for (let i = 1; i < json.length; i++) {
            const row = json[i];
            if (row[0] === lastDate && row[1]) {
                companiesSet.add(row[1]);
            }
        }

        let companies = Array.from(companiesSet);
        let tableRows = "";

        companies.forEach(company => {
            for (let i = 1; i < json.length; i++) {
                const row = json[i];
                if (row[1] === company) {
                    const colF = row[5] || "";
                    const colG = row[6] || "";
                    const colH = row[7] || "";
                    const colQ = row[16] || "";
                    const colR = row[17] || "";
                    const companyType = row[2] || ""; // –∫–æ–ª–æ–Ω–∫–∞ C

                    tableRows += `
                    <tr data-company-type="${companyType}">
                        <td>${company}</td>
                        <td>${colF}</td>
                        <td>${colG}</td>
                        <td>${colH}</td>
                        <td>${colQ}</td>
                        <td>${colR}</td>
                    </tr>
                    `;
                    break;
                }
            }
        });

        document.getElementById("company-table-body").innerHTML = tableRows;




        document.getElementById("factory_date").addEventListener("click", () => {
            const selectedDate = getSelectedDate();
            if (!selectedDate) {
                alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.");
                return;
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ Excel-—Ñ–æ—Ä–º–∞—Ç (—á–∏—Å–ª–æ –¥–Ω–µ–π —Å 1899-12-30)
            const targetExcelDate = Math.floor((selectedDate.getTime() / 86400000) + 25569);

            let companiesSet = new Set();
            for (let i = 1; i < json.length; i++) {
                const row = json[i];
                if (row[0] === targetExcelDate && row[1]) {
                    companiesSet.add(row[1]);
                }
            }

            const companies = Array.from(companiesSet);
            let tableRows = "";

            companies.forEach(company => {
                for (let i = 1; i < json.length; i++) {
                    const row = json[i];
                    if (row[0] === targetExcelDate && row[1] === company) {
                        const colF = row[5] || "";
                        const colG = row[6] || "";
                        const colH = row[7] || "";
                        const colQ = row[16] || "";
                        const colR = row[17] || "";

                        const companyType = row[2] || ""; // –∫–æ–ª–æ–Ω–∫–∞ C

                        tableRows += `
                        <tr data-company-type="${companyType}">
                            <td>${company}</td>
                            <td>${colF}</td>
                            <td>${colG}</td>
                            <td>${colH}</td>
                            <td>${colQ}</td>
                            <td>${colR}</td>
                        </tr>
                        `;
                        break;
                    }
                }
            });

            document.getElementById("company-table-body").innerHTML = tableRows;


            // –≠—Ç–æ—Ç –∫–æ–¥ –¥–æ–±–∞–≤–ª—è–π –í–ù–£–¢–†–ò –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ #factory_date ‚Äî –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            let ishlabChiqarishSum = 0;
            let birjagaYuklashSum = 0;
            let eksportSum = 0;
            let sColumnSum = 0;

            for (let i = 1; i < json.length; i++) {
                const row = json[i];
                if (!row || !row[0]) continue;

                const excelDate = row[0];
                const dateCell = new Date((excelDate - (25567 + 2)) * 86400 * 1000);
                if (isNaN(dateCell)) continue;

                if (
                    dateCell.getDate() === selectedDate.getDate() &&
                    dateCell.getMonth() === selectedDate.getMonth() &&
                    dateCell.getFullYear() === selectedDate.getFullYear()
                ) {
                    const category = row[3];
                    const value = parseFloat(row[7]); // H –∫–æ–ª–æ–Ω–∫–∞

                    if (category === "–ò—à–ª–∞–± —á–∏“õ–∞—Ä–∏—à" && !isNaN(value)) {
                        ishlabChiqarishSum += value;
                    }
                    if (category === "–ë–∏—Ä–∂–∞–≥–∞ —é–∫–ª–∞—à" && !isNaN(value)) {
                        birjagaYuklashSum += value;
                    }
                    if (category === "–≠–∫—Å–ø–æ—Ä—Ç" && !isNaN(value)) {
                        eksportSum += value;
                    }

                    const sVal = parseFloat(row[18]); // S –∫–æ–ª–æ–Ω–∫–∞
                    if (!isNaN(sVal)) {
                        sColumnSum += sVal;
                    }
                }
            }

            document.getElementById('sum-text').innerText = ishlabChiqarishSum.toFixed(2);
            document.getElementById('sum-text1').innerText = birjagaYuklashSum.toFixed(2);
            document.getElementById('sum-text2').innerText = eksportSum.toFixed(2);
            document.getElementById('s-column-sum').innerText = sColumnSum.toFixed(2);

        });





        // –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
        let currentFilter = "summary";

        document.getElementById("summary").addEventListener("click", () => {
            currentFilter = "summary";
            updateTableByFilter();
        });

        document.getElementById("neft").addEventListener("click", () => {
            currentFilter = "neft";
            updateTableByFilter();
        });

        document.getElementById("xk").addEventListener("click", () => {
            currentFilter = "xk";
            updateTableByFilter();
        });

        function updateTableByFilter() {
            const rows = document.querySelectorAll("#company-table-body tr");
            rows.forEach(row => {
                const cells = row.querySelectorAll("td");
                const companyType = row.getAttribute("data-company-type");

                if (currentFilter === "summary" ||
                    (currentFilter === "neft" && companyType === "–é–∑–±–µ–∫–Ω–µ—Ñ—Ç–≥–∞–∑") ||
                    (currentFilter === "xk" && companyType === "–•–æ—Ä–∏–∂–∏–π –≤–∞ “ö–ö")) {
                    // –ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                    row.classList.remove("faded");
                    for (let i = 1; i < cells.length; i++) {
                        if (cells[i].getAttribute("data-original")) {
                            cells[i].textContent = cells[i].getAttribute("data-original");
                        }
                    }
                } else {
                    // –ü–æ—Ç—É—Ö—à–∞—è —Å—Ç—Ä–æ–∫–∞
                    row.classList.add("faded");
                    for (let i = 1; i < cells.length; i++) {
                        if (!cells[i].getAttribute("data-original")) {
                            cells[i].setAttribute("data-original", cells[i].textContent);
                        }
                        cells[i].textContent = "-";
                    }
                }
            });
        }
    };

    reader.readAsArrayBuffer(input.files[0]);
});


// ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–º–ø–∞–Ω–∏–∏
document.querySelectorAll('.category-btn').forEach(button => {
    button.addEventListener('click', () => {
        const category = button.dataset.category;
        const company = document.getElementById('company-select').value;
        const selectedDate = getSelectedDate();

        const { map2024, map2025 } = filterData(company, category, selectedDate);
        drawChart({ map2024, map2025 });
    });
});

// üìÖ –í—ã–±–æ—Ä –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
function getSelectedDate() {
    const dateStr = document.getElementById('date-picker')?.value;

    // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–æ "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
    if (!dateStr || dateStr.toLowerCase() === "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ") return null;

    const [day, month, year] = dateStr.split('.');
    return new Date(`${year}-${month}-${day}`);
}

// üìä –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
function filterData(companyFilter, categoryFilter, selectedDate = null, startDate = null, endDate = null) {
    const map2025 = new Map();
    const map2024 = new Map();
    lastFilledDate = null;

    for (let i = 1; i < json.length; i += 21) {
        const row = json[i];
        if (!row || !row[0]) continue;

        const excelDate = row[0];
        const dateCell = new Date((excelDate - (25567 + 2)) * 86400 * 1000);
        if (isNaN(dateCell)) continue;

        // üî• –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω—É
        if (selectedDate) {
            if (
                dateCell.getFullYear() !== selectedDate.getFullYear() ||
                dateCell.getMonth() !== selectedDate.getMonth() ||
                dateCell.getDate() !== selectedDate.getDate()
            ) continue;
        } else if (startDate && endDate) {
            if (dateCell < startDate || dateCell > endDate) continue;
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –¥–∞—Ç—É
            lastFilledDate = dateCell;
        }

        let sum2025 = 0;
        let sum2024 = 0;

        for (let j = 0; j < 21; j++) {
            const current = json[i + j];
            const company = current?.[1];
            const category = current?.[3];
            const value2025 = current?.[7];
            const value2024 = current?.[5];

            const companyMatches = companyFilter === "–û–±—â–∏–π" || company === companyFilter;
            const categoryMatches = !categoryFilter || category === categoryFilter;

            if (companyMatches && categoryMatches) {
                const n25 = typeof value2025 === 'number' ? value2025 : parseFloat(value2025);
                if (!isNaN(n25)) sum2025 += n25;

                const n24 = typeof value2024 === 'number' ? value2024 : parseFloat(value2024);
                if (!isNaN(n24)) sum2024 += n24;
            }
        }

        if (sum2025 > 0 || sum2024 > 0) {
            const key = `${dateCell.getMonth() + 1}-${dateCell.getDate()}`;
            if (sum2025 > 0) map2025.set(key, sum2025);
            if (sum2024 > 0) map2024.set(key, sum2024);
            lastFilledDate = dateCell;
        }
    }

    return { map2024, map2025 };
}


// üìà –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
function drawChart({ map2024, map2025 }) {
    const chartData = [['–î–∞—Ç–∞', '2024', '2025']];

    for (let m = 1; m <= 12; m++) {
        for (let d = 1; d <= 31; d++) {
            const key = `${m}-${d}`;
            const val2024 = map2024.has(key) ? map2024.get(key) : null;
            const val2025 = map2025.has(key) ? map2025.get(key) : null;

            if (val2024 !== null || val2025 !== null) {
                const date = new Date(2025, m - 1, d);
                if (!lastFilledDate || date <= lastFilledDate) {
                    chartData.push([date, val2024 ?? 0, val2025 ?? 0]);
                }
            }
        }
    }

    const data = google.visualization.arrayToDataTable(chartData);

    const options = {
        title: '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—É—Ç–æ—á–Ω–æ–π –¥–æ–±—ã—á–∏ –∑–∞ 2024 –∏ 2025 –≥–≥.',
        curveType: 'function',
        legend: {
            position: 'bottom',
            textStyle: { color: '#ffffff' }
        },
        hAxis: {
            format: 'MMM dd',
            gridlines: { count: 12, color: '#888888' },
            textStyle: { color: '#ffffff' }
        },
        vAxis: {
            gridlines: { color: '#888888' },
            textStyle: { color: '#ffffff' }
        },
        colors: ['#dc3912', '#3366cc'],
        animation: {
            duration: 1000,
            easing: 'out',
            startup: true
        },
        backgroundColor: 'transparent',
        titleTextStyle: { color: '#ffffff', fontSize: 16 },
        isStacked: false,
        areaOpacity: 0.2 // —ç—Ç–æ –¥–µ–ª–∞–µ—Ç "—Ç–µ–Ω—å" –ø–æ–¥ –ª–∏–Ω–∏—è–º–∏
    };


    const chart = new google.visualization.AreaChart(document.getElementById('chart_div'));
    chart.draw(data, options);
}

// üìÖ flatpickr –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
flatpickr("#date-picker", {
    dateFormat: "d.m.Y",
    allowInput: true,
    defaultDate: null,
    onReady: function (selectedDates, dateStr, instance) {
        instance.input.placeholder = "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ";
    },
});

document.getElementById("cclear").addEventListener("click", () => {
    const dateInput = document.getElementById("date-picker");
    if (dateInput._flatpickr) {
        dateInput._flatpickr.clear(); // –û—á–∏—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    }
    dateInput.value = ""; // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º
    lastFilledDate = null;

    // üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ
    const selectedCategory = getCurrentCategory();     // —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ (–ò—à–ª–∞–± —á–∏–∫–∞—Ä–∏—à –∏ —Ç.–¥.)
    const selectedCompany = getCurrentCompany();       // —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏ (summary, neft, xk)

    renderTable(selectedCompany, selectedCategory, null); // –±–µ–∑ selectedDate
    renderChart(selectedCompany, selectedCategory, null); // –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞

    console.log("–î–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞, –≥—Ä–∞—Ñ–∏–∫ –∏ —Ç–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
});


// üìÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è, –º–µ—Å—è—Ü–∞, –≥–æ–¥–∞

document.getElementById('last-day-btn').addEventListener('click', () => {
    if (!lastFilledDate) {
        alert('–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
        return;
    }
    const company = document.getElementById('company-select').value;
    const category = null;

    const startDate = new Date(lastFilledDate);
    const endDate = new Date(lastFilledDate);

    const { map2024, map2025 } = filterData(company, category, null, startDate, endDate);
    drawChart({ map2024, map2025 });
});

document.getElementById('last-month-btn').addEventListener('click', () => {
    if (!lastFilledDate) {
        alert('–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
        return;
    }
    const company = document.getElementById('company-select').value;
    const category = null;

    const endDate = new Date(lastFilledDate);
    const startDate = new Date(lastFilledDate);
    startDate.setMonth(startDate.getMonth() - 1);

    const { map2024, map2025 } = filterData(company, category, null, startDate, endDate);
    drawChart({ map2024, map2025 });
});

document.getElementById('last-year-btn').addEventListener('click', () => {
    if (!lastFilledDate) {
        alert('–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.');
        return;
    }
    const company = document.getElementById('company-select').value;
    const category = null;

    const endDate = new Date(lastFilledDate);
    const startDate = new Date(lastFilledDate);
    startDate.setFullYear(startDate.getFullYear() - 1);

    const { map2024, map2025 } = filterData(company, category, null, startDate, endDate);
    drawChart({ map2024, map2025 });
});

const { map2024, map2025 } = filterData(company, category, selectedDate);
// –í—ã–≤–µ—Å—Ç–∏ —Å—É–º–º—É –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ
let totalSum = 0;
for (let value of map2025.values()) {
    totalSum += value;
}

//–°—É–º–º–∞ "–ö—É–Ω –±–æ—à–∏–¥–∞ –∫–æ–ª–¥–∏–∫"
document.getElementById('sum-text').innerText = `${totalSum.toFixed(2)}`;





function updateFactoryTableByPeriod(period) {
    if (!lastFilledDate || json.length === 0) return;

    const targetRows = [];
    const lastYear = lastFilledDate.getFullYear();
    const lastMonth = lastFilledDate.getMonth();
    const lastDay = lastFilledDate.getDate();

    for (let i = 1; i < json.length; i++) {
        const row = json[i];
        if (!row || !row[0]) continue;

        const excelDate = row[0];
        const dateCell = new Date((excelDate - (25567 + 2)) * 86400 * 1000);
        if (isNaN(dateCell)) continue;

        const sameDay = dateCell.getFullYear() === lastYear && dateCell.getMonth() === lastMonth && dateCell.getDate() === lastDay;
        const sameMonth = dateCell.getFullYear() === lastYear && dateCell.getMonth() === lastMonth;
        const sameYear = dateCell.getFullYear() === lastYear;

        if (
            (period === 'day' && sameDay) ||
            (period === 'month' && sameMonth) ||
            (period === 'year' && sameYear)
        ) {
            targetRows.push(row);
        }
    }

    // –°–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–π
    const companiesSet = new Set();
    targetRows.forEach(row => {
        if (row[1]) companiesSet.add(row[1]); // –∫–æ–ª–æ–Ω–∫–∞ B
    });

    const companies = Array.from(companiesSet);
    let tableRows = "";

    companies.forEach(company => {
        // —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
        const companyRows = targetRows.filter(row => row[1] === company);

        // —Å—É–º–º–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        let sumF = 0, sumG = 0, sumH = 0, sumQ = 0, sumR = 0;

        companyRows.forEach(row => {
            sumF += parseFloat(row[5]) || 0;
            sumG += parseFloat(row[6]) || 0;
            sumH += parseFloat(row[7]) || 0;
            sumQ += parseFloat(row[16]) || 0;
            sumR += parseFloat(row[17]) || 0;
        });

        tableRows += `
            <tr>
                <td>${company}</td>
                <td>${sumF.toFixed(2)}</td>
                <td>${sumG.toFixed(2)}</td>
                <td>${sumH.toFixed(2)}</td>
                <td>${sumQ.toFixed(2)}</td>
                <td>${sumR.toFixed(2)}</td>
            </tr>
        `;
    });

    document.getElementById("company-table-body").innerHTML = tableRows;
}
document.getElementById('last-day-btn').addEventListener('click', () => {
    updateFactoryTableByPeriod('day');
});

document.getElementById('last-month-btn').addEventListener('click', () => {
    updateFactoryTableByPeriod('month');
});

document.getElementById('last-year-btn').addEventListener('click', () => {
    updateFactoryTableByPeriod('year');
});




//---------------------------------------------< SORT BY CHECKBOX >------------------------------------------------

function updateDonutValues(filterType) {
    const lastDate = getLastDate(); // –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –≤ json

    let uzbSum = 0;
    let otherSum = 0;

    json.forEach(row => {
        const rowDate = parseDate(row[0]);
        const value = parseFloat(row[7]) || 0;
        const company = row[2];

        let match = false;

        if (filterType === 'day') {
            match = rowDate.toDateString() === lastDate.toDateString();
        } else if (filterType === 'month') {
            match = rowDate.getMonth() === lastDate.getMonth() &&
                rowDate.getFullYear() === lastDate.getFullYear();
        } else if (filterType === 'year') {
            match = rowDate.getFullYear() === lastDate.getFullYear();
        }

        if (match) {
            if (company === '–é–∑–±–µ–∫–Ω–µ—Ñ—Ç–≥–∞–∑') {
                uzbSum += value;
            } else {
                otherSum += value;
            }
        }
    });

    document.getElementById('uzbekneftgazsum').textContent = Math.floor(uzbSum);
    document.getElementById('other-sum').textContent = Math.floor(otherSum);

    // updateDonut –≤—ã–∑–æ–≤–µ—Ç—Å—è —Å–∞–º —á–µ—Ä–µ–∑ MutationObserver
}

// –ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ç–æ–ª—å–∫–æ –∫ –ø–æ–Ω—á–∏–∫—É
document.getElementById('last-day-btn').addEventListener('click', () => {
    updateDonutValues('day');
});

document.getElementById('last-month-btn').addEventListener('click', () => {
    updateDonutValues('month');
});

document.getElementById('last-year-btn').addEventListener('click', () => {
    updateDonutValues('year');
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
updateDonutValues('day');
